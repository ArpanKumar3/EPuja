/*
# [Initial Schema Setup for ePuja Platform]
This script sets up the initial database schema for the ePuja platform, including tables for user profiles, pujas, bookings, and more. It also configures Row Level Security (RLS) to protect user data and populates the pujas table with initial data.

## Query Description: [This script is foundational and will create the entire database structure. It is designed to be run on a new, empty project. It populates the 'pujas' table, but other tables will be empty. No existing data will be lost if run on a fresh database.]

## Metadata:
- Schema-Category: ["Structural"]
- Impact-Level: ["High"]
- Requires-Backup: [true]
- Reversible: [false]

## Structure Details:
- Tables Created: profiles, pujas, bookings, addresses, transactions
- RLS Policies: Enabled for all user-data tables.
- Storage Buckets: Creates 'puja_assets'.

## Security Implications:
- RLS Status: [Enabled]
- Policy Changes: [Yes]
- Auth Requirements: [Policies are based on auth.uid()]

## Performance Impact:
- Indexes: [Primary keys and foreign keys are indexed by default.]
- Triggers: [A trigger is added to create a user profile on new user signup.]
- Estimated Impact: [Low initial impact. Indexes will support future query performance.]
*/

-- 1. PROFILES TABLE
-- Stores public user information.
CREATE TABLE public.profiles (
    id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,
    full_name text,
    mobile_number text,
    gotra text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT profiles_pkey PRIMARY KEY (id)
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Function to create a profile for a new user.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name)
  VALUES (new.id, new.raw_user_meta_data->>'full_name');
  RETURN new;
END;
$$;

-- Trigger to execute the function on new user creation.
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();


-- 2. PUJAS TABLE
-- Stores all available pujas.
CREATE TABLE public.pujas (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL,
    category text,
    temple text,
    price numeric NOT NULL,
    duration text,
    image_url text,
    description text,
    long_description text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT pujas_pkey PRIMARY KEY (id)
);
ALTER TABLE public.pujas ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Pujas are viewable by everyone." ON public.pujas FOR SELECT USING (true);


-- 3. BOOKINGS TABLE
-- Stores user bookings for pujas.
CREATE TABLE public.bookings (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    puja_id bigint NOT NULL REFERENCES public.pujas ON DELETE CASCADE,
    booking_date timestamp with time zone NOT NULL,
    status text DEFAULT 'upcoming'::text NOT NULL, -- upcoming, in_progress, completed, cancelled
    package_name text NOT NULL,
    price_paid numeric NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT bookings_pkey PRIMARY KEY (id)
);
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own bookings." ON public.bookings FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own bookings." ON public.bookings FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own booking status (e.g., cancel)." ON public.bookings FOR UPDATE USING (auth.uid() = user_id);


-- 4. ADDRESSES TABLE
-- Stores user addresses.
CREATE TABLE public.addresses (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    address_line1 text,
    address_line2 text,
    city text,
    state text,
    pincode text,
    country text,
    is_default boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT addresses_pkey PRIMARY KEY (id)
);
ALTER TABLE public.addresses ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own addresses." ON public.addresses FOR ALL USING (auth.uid() = user_id);


-- 5. TRANSACTIONS TABLE
-- Stores payment transactions.
CREATE TABLE public.transactions (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    booking_id bigint NOT NULL REFERENCES public.bookings ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    amount numeric NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL, -- pending, success, failed
    payment_gateway_ref text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT transactions_pkey PRIMARY KEY (id)
);
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own transactions." ON public.transactions FOR SELECT USING (auth.uid() = user_id);


-- 6. STORAGE BUCKET
-- Create a bucket for puja images and assets.
INSERT INTO storage.buckets (id, name, public)
VALUES ('puja_assets', 'puja_assets', true)
ON CONFLICT (id) DO NOTHING;

CREATE POLICY "Puja images are publicly accessible." ON storage.objects
FOR SELECT USING (bucket_id = 'puja_assets');

CREATE POLICY "Anyone can upload to puja_assets." ON storage.objects
FOR INSERT WITH CHECK (bucket_id = 'puja_assets');


-- 7. POPULATE PUJAS TABLE
-- Insert initial data into the pujas table.
INSERT INTO public.pujas (name, category, temple, price, duration, image_url, description) VALUES
('Ganesh Chaturthi Puja', 'festival', 'Siddhivinayak Temple', 2500, '2 hours', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x300/FF6B35/FFFFFF?text=Ganesh+Puja', 'Traditional Ganesh Chaturthi ceremony with complete rituals'),
('Griha Pravesh Puja', 'housewarming', 'Mahalakshmi Temple', 5000, '3 hours', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x300/8B5CF6/FFFFFF?text=Griha+Pravesh', 'Auspicious housewarming ceremony for new home'),
('Lakshmi Puja', 'prosperity', 'Mahalakshmi Temple', 3500, '2.5 hours', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x300/10B981/FFFFFF?text=Lakshmi+Puja', 'Invoke Goddess Lakshmi for prosperity and wealth'),
('Vivah Sanskar', 'wedding', 'Kashi Vishwanath Temple', 15000, '4 hours', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x300/EF4444/FFFFFF?text=Wedding+Ceremony', 'Complete Vedic wedding ceremony with all rituals'),
('Mahamrityunjaya Puja', 'health', 'Somnath Temple', 4000, '2 hours', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x300/3B82F6/FFFFFF?text=Health+Puja', 'Powerful puja for health and well-being'),
('Diwali Puja', 'festival', 'Golden Temple', 3000, '2.5 hours', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x300/F59E0B/FFFFFF?text=Diwali+Puja', 'Traditional Diwali celebration with lights and prayers'),
('Navaratri Puja', 'festival', 'Vaishno Devi Temple', 4500, '3 hours', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x300/EC4899/FFFFFF?text=Navaratri+Puja', 'Nine nights of divine celebration with Goddess Durga'),
('Shani Puja', 'prosperity', 'Shani Shingnapur Temple', 2800, '1.5 hours', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x300/6366F1/FFFFFF?text=Shani+Puja', 'Special puja to appease Lord Shani for prosperity');
